/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./cartridges/app_dune/cartridge/client/default/js/geScriptLoader.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./cartridges/app_dune/cartridge/client/default/js/geScriptLoader.js":
/*!***************************************************************************!*\
  !*** ./cartridges/app_dune/cartridge/client/default/js/geScriptLoader.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* eslint new-cap: \"off\", no-param-reassign: \"off\" */\n/* globals GlobalE, Promise */\n\n\n\n//--------------------------------------------------\n// Helpers\n//--------------------------------------------------\nvar Helpers = {\n  makeJsonAjaxCall: function makeJsonAjaxCall(url, type, data) {\n    var promise = new Promise(function (resolve, reject) {\n      var xhr = new XMLHttpRequest();\n      xhr.open(type, url, true);\n      xhr.setRequestHeader('Cache-Control', 'no-cache');\n      xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n      xhr.send(data || null);\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            resolve(xhr.responseText);\n          } else {\n            reject(xhr.status);\n          }\n        }\n      };\n    });\n    return promise;\n  },\n  removeParametersFromQueryString: function removeParametersFromQueryString(queryString, parameters) {\n    var qsParams = queryString && typeof queryString === 'string' && queryString.length > 0 ? queryString.split('&') : [];\n    var removedParams = parameters && Array.isArray(parameters) && parameters.length > 0 ? parameters : [];\n    removedParams.forEach(function (param) {\n      var prefix = encodeURIComponent(param) + '=';\n      for (var i = qsParams.length; i-- > 0;) {\n        if (qsParams[i].lastIndexOf(prefix, 0) !== -1) {\n          qsParams.splice(i, 1);\n        }\n      }\n    });\n    return qsParams.join('&');\n  }\n};\n\n//--------------------------------------------------\n// Globale Script Loader\n//--------------------------------------------------\n\n/**\n * Represents Globale Script Loader Class\n * @constructor\n */\nfunction GeScriptLoader() {}\n\n/**\n * Init Globale Script Loader Data\n */\nGeScriptLoader.prototype.initScriptLoaderData = function () {\n  try {\n    window.geScriptLoaderData = JSON.parse(document.querySelector('#globale-script-loader-data').innerHTML);\n  } catch (e) {\n    window.geScriptLoaderData = null;\n    console.error(e); // eslint-disable-line no-console\n  }\n};\n\n/**\n * Init Global-e Client SDK\n * @returns {Object} promise - Promise Object\n */\nGeScriptLoader.prototype.initClientSDK = function () {\n  // check script loader data\n  if (!window.geScriptLoaderData) {\n    return Promise.reject();\n  }\n  return new Promise(function (resolve, reject) {\n    window.globaleObject = 'gle';\n    window.gle = window.gle || function () {\n      (window.gle.q = window.gle.q || []).push(arguments);\n    };\n    window.gle.m = window.geScriptLoaderData.clientJsMerchantId;\n    window.gle.v = window.geScriptLoaderData.apiVersion;\n    var s = document.createElement('script');\n    s.src = window.geScriptLoaderData.clientJsUrl + '?v=' + window.geScriptLoaderData.apiVersion;\n    s.async = true;\n    s.onerror = function (err) {\n      reject(err, s);\n    };\n    var r = false;\n    s.onreadystatechange = function () {\n      if (!r && (!this.readyState || this.readyState === 'complete')) {\n        r = true;\n        resolve();\n      }\n    };\n    s.onload = s.onreadystatechange;\n    var t = document.querySelectorAll('script')[0];\n    t.parentElement.insertBefore(s, t);\n  });\n};\n\n/**\n * Init Content Price Conversion\n */\nGeScriptLoader.prototype.initContentPriceConversion = function () {\n  /**\n   * Run Price Conversion handler\n   */\n  function runPriceConversion() {\n    // find DOM price elements to convert and filter out already converted ones or with not valid configuration\n    var priceElements = Array.prototype.slice.call(document.querySelectorAll('[data-ge-convert-price]')).filter(function (el) {\n      // filter out already converted elements\n      if ('isConverted' in el.dataset && el.dataset.isConverted === 'true') {\n        return false;\n      }\n\n      // filter out misconfigured elements\n      if (!('productId' in el.dataset && el.dataset.productId !== '') && !('originalPrice' in el.dataset && el.dataset.originalPrice !== '' && !isNaN(el.dataset.originalPrice)) // eslint-disable-line no-restricted-globals\n      ) {\n        return false;\n      }\n      return true;\n    });\n\n    // iterate DOM price elements and convert price\n    priceElements.forEach(function (el) {\n      // define base request URL\n      var convertPriceUrl = window.geScriptLoaderData.globaleConvertPriceUrl;\n\n      // modify request URL\n      // set country and currency code to make sure that if the response is cached it is personalized per country and currency\n      convertPriceUrl += '?countryCode=' + encodeURIComponent(window.geScriptLoaderData.country);\n      convertPriceUrl += '&currencyCode=' + encodeURIComponent(window.geScriptLoaderData.currency);\n\n      // set parameters to price convert\n      if (el.dataset.productId) {\n        // the highest priority is to process 'data-product-id'\n        convertPriceUrl += '&productId=' + encodeURIComponent(el.dataset.productId);\n      } else if (el.dataset.originalPrice) {\n        // process 'data-original-price' and 'data-is-discount'\n        convertPriceUrl += '&originalPrice=' + encodeURIComponent(el.dataset.originalPrice);\n        convertPriceUrl += '&isDiscount=' + encodeURIComponent(el.dataset.isDiscount);\n      }\n\n      // send request and get converted price\n      Helpers.makeJsonAjaxCall(convertPriceUrl, 'GET').then(function (response) {\n        if (response) {\n          response = JSON.parse(response);\n          if (response.success) {\n            el.innerHTML = response.convertedPrice; // eslint-disable-line no-param-reassign\n            el.dataset.isConverted = 'true';\n          }\n        }\n      }).catch(function (e) {\n        console.error(e); // eslint-disable-line no-console\n      });\n    });\n  }\n  try {\n    // skip price conversion if script loader data is not available or if country is not Global-e operated\n    if (!window.geScriptLoaderData || !window.geScriptLoaderData.globaleOperatedCountry) {\n      return;\n    }\n\n    /**\n     * Add event listener\n     * This custom event can be triggered if is needed to update/re-calculate the values in static content\n     * @example\n     * // Create the event\n     * var event = new CustomEvent(\"runPriceConversion\");\n     * // Trigger the event\n     * window.dispatchEvent(event);\n     */\n    window.addEventListener('runPriceConversion', runPriceConversion, false);\n\n    // run initial price conversion\n    runPriceConversion();\n  } catch (e) {\n    console.error(e); // eslint-disable-line no-console\n  }\n};\n\n/**\n * Remove Global-e redirect parameters\n */\nGeScriptLoader.prototype.removeGeRedirectParams = function () {\n  try {\n    var updatedUrl = new URL(document.location);\n    var urlParams = updatedUrl.searchParams;\n    if (urlParams.get('glCountry') || urlParams.get('glCurrency')) {\n      // set 'Welcome Popup' cookie with 'false' value\n      // additional GE parameters are existed in URL only during redirect and 'Welcome Popup' should not be displayed\n      GlobalE.SetCookie('GlobalE_Welcome_Data', {\n        showWelcome: false\n      }, GlobalE.GE_DATA_COOKIE_EXP, true);\n\n      // remove GE parameters and relpace history state\n      urlParams.delete('glCountry');\n      urlParams.delete('glCurrency');\n      window.history.replaceState({}, document.title, updatedUrl.toString());\n\n      // remove GE parameters from 'data-querystring' in DOM\n      var requestDataEl = document.querySelector('[data-action][data-querystring]');\n      if (requestDataEl) {\n        var queryString = requestDataEl.getAttribute('data-querystring');\n        queryString = Helpers.removeParametersFromQueryString(queryString, ['glCountry', 'glCurrency']);\n        requestDataEl.setAttribute('data-querystring', queryString);\n      }\n    }\n  } catch (e) {\n    console.error(e); // eslint-disable-line no-console\n  }\n};\n\n/**\n * Handler function of 'GlobalE.LoadShippingSwitcher' event\n */\nGeScriptLoader.prototype.loadShippingSwitcherHandler = function () {\n  try {\n    var links = document.querySelectorAll('.globale-selector');\n    Array.prototype.map.call(links, function (link) {\n      GlobalE.AttachEvent('click', link, function () {\n        return GlobalE.ShippingSwitcher.Show();\n      });\n    });\n\n    // check and show geo country popup on initial load\n    if (!GlobalE.GetCookie('GlobalE_Geo_Popup')) {\n      if (window.geScriptLoaderData.shippingSwitcher && window.geScriptLoaderData.shippingSwitcher.showGeoCountryPopup !== false && window.geScriptLoaderData.geoLocationCountry && window.geScriptLoaderData.geoLocationCountry.countryCode && window.geScriptLoaderData.geoLocationCountry.isCountryExists && window.geScriptLoaderData.geoLocationCountry.countryCode !== window.geScriptLoaderData.country || window.geScriptLoaderData.geForceSwitcherStart) {\n        GlobalE.SetCookie('GlobalE_Welcome_Data', {\n          showWelcome: false\n        }, GlobalE.GE_DATA_COOKIE_EXP, true);\n        GlobalE.ShippingSwitcher.Show(window.geScriptLoaderData.geoLocationCountry.countryCode);\n      }\n\n      // set 'GlobalE_Geo_Popup' cookie\n      GlobalE.SetCookie('GlobalE_Geo_Popup', true, GlobalE.GE_DATA_COOKIE_EXP);\n    } else if (window.geScriptLoaderData.geForceSwitcherStart) {\n      GlobalE.ShippingSwitcher.Show(window.geScriptLoaderData.geoLocationCountry.countryCode);\n    }\n  } catch (e) {\n    console.error(e); // eslint-disable-line no-console\n  }\n};\n\n/**\n * Handler function of 'GlobalE.OnShippingSwitcherClosed' event\n * @param {Object} event - Event object\n * @returns {boolean} - 'false' by default\n */\nGeScriptLoader.prototype.onShippingSwitcherClosedHandler = function (event) {\n  try {\n    // check if window.geScriptLoaderData exists\n    if (!window.geScriptLoaderData) {\n      throw new Error('Script Loader Data not found');\n    }\n\n    // check if window.GlobalE exists\n    if (!window.GlobalE) {\n      throw new Error('GlobalE not found');\n    }\n    var countryMainSite;\n    var geForceSwitchReload;\n    if (event && event.redirectURL) {\n      countryMainSite = event.redirectURL.split('|')[1];\n      geForceSwitchReload = countryMainSite !== window.geScriptLoaderData.siteId;\n    }\n\n    // extract data from window.geScriptLoaderData\n    var currentCountry = window.geScriptLoaderData.country;\n    var currentCurrency = window.geScriptLoaderData.currency;\n    var currentLanguage = window.geScriptLoaderData.languageSwitcher && window.geScriptLoaderData.languageSwitcher.selectedLanguage;\n\n    // check if redirect is needed\n    var isRedirect = event.button === 'save' && (event.country !== currentCountry || event.currency !== currentCurrency || geForceSwitchReload || window.GlobalE.ShippingSwitcher && window.GlobalE.ShippingSwitcher.isLanguageDropDownShown && window.GlobalE.ShippingSwitcher.selectedLanguage !== currentLanguage);\n\n    // if redirection is not needed, return false\n    if (!isRedirect) {\n      return false;\n    }\n\n    // construct URL for redirection\n    var url = new URL(window.geScriptLoaderData.locationRedirectUrl);\n    url.searchParams.append('countryCode', event.country);\n    url.searchParams.append('currencyCode', event.currency);\n\n    // append locale code if language dropdown is shown\n    if (window.GlobalE.ShippingSwitcher && window.GlobalE.ShippingSwitcher.isLanguageDropDownShown) {\n      url.searchParams.append('localeCode', window.GlobalE.ShippingSwitcher.selectedLanguage);\n    }\n\n    // append additional parameters if available\n    var requestElement = document.querySelector('[data-action][data-querystring]');\n    if (requestElement) {\n      var action = requestElement.dataset.action;\n      if (action) {\n        url.searchParams.append('action', action);\n      }\n      var querystring = requestElement.dataset.querystring;\n      if (querystring) {\n        url.searchParams.append('querystring', querystring);\n      }\n    }\n\n    // prepare redirection data\n    var locationRedirectData = {\n      url: url\n    };\n\n    // invoke callback if available\n    if (typeof window.GlobalE.onBeforeLocatioRedirect === 'function') {\n      window.GlobalE.onBeforeLocatioRedirect(event, locationRedirectData);\n    }\n    $.spinner().start();\n\n    // Request to backend to get redirect url\n    $.ajax({\n      url: locationRedirectData.url.toString(),\n      method: 'GET',\n      success: function success(response) {\n        if (response.redirectURL) {\n          window.location.href = response.redirectURL;\n        } else {\n          $.spinner().stop();\n        }\n      },\n      error: function error() {\n        $.spinner().stop();\n      }\n    });\n  } catch (e) {\n    console.error(e); // eslint-disable-line no-console\n  }\n  return false;\n};\n\n/**\n * Init 'KeepAlive' feature\n */\nGeScriptLoader.prototype.initKeepAlive = function () {\n  var geIframe = document.querySelector('#gle_iframe');\n  try {\n    window.globaleKeepAlive = setInterval(function () {\n      Helpers.makeJsonAjaxCall(geIframe.dataset.keepaliveUrl, 'GET').then(function (response) {// eslint-disable-line no-unused-vars\n        // handle response\n      }).catch(function (e) {\n        console.error(e); // eslint-disable-line no-console\n      });\n    }, 60000); // every 1 minute\n  } catch (e) {\n    console.error(e); // eslint-disable-line no-console\n  }\n};\n\n/**\n * Handler function of 'GlobalE.OnCheckoutStepLoadedHandler' event\n * @param {Object} data - Event data\n */\nGeScriptLoader.prototype.onCheckoutStepLoadedHandler = function (data) {\n  try {\n    if (data.StepId === data.Steps.CONFIRMATION) {\n      // stop sending keepAlive ajax call\n      if ('globaleKeepAlive' in window && window.globaleKeepAlive) {\n        clearInterval(window.globaleKeepAlive);\n      }\n    }\n\n    /**\n     * If you need to implement the frontend analytics please put it here\n     */\n\n    /**\n     * Only for Backend Analytics, like standard SFCC Merchant Tools / Analytics / Purchase Reports.\n     * Should be handled in Globale-Analytics controller\n     */\n    var geIframe = document.querySelector('#gle_iframe');\n    Helpers.makeJsonAjaxCall(geIframe.dataset.analyticsUrl, 'POST', JSON.stringify(data)).then(function (response) {// eslint-disable-line no-unused-vars\n      // handle response\n    }).catch(function (e) {\n      console.error(e); // eslint-disable-line no-console\n    });\n  } catch (e) {\n    console.error(e); // eslint-disable-line no-console\n  }\n};\n\n/**\n * Handler function of 'GlobalE.OnClientEvent' event\n * Used for Extreme Analytic\n * @param {string} source - Event source\n * @param {Object} data - Event data\n */\nGeScriptLoader.prototype.onClientEvent = function (source, data) {\n  // eslint-disable-line no-unused-vars\n  try {\n    switch (source) {\n      case GEMerchantUtils.ClientEvents.INPUT_BLUR:\n        // eslint-disable-line no-undef\n        // your code\n        break;\n      case GEMerchantUtils.ClientEvents.STORE_SELECTION:\n        // eslint-disable-line no-undef\n        // your code\n        break;\n      case GEMerchantUtils.ClientEvents.SHIPPINGMETHOD_SELECTION:\n        // eslint-disable-line no-undef\n        // your code\n        break;\n      case GEMerchantUtils.ClientEvents.TAX_OPTION_SELECTED:\n        // eslint-disable-line no-undef\n        // your code\n        break;\n      case GEMerchantUtils.ClientEvents.PAYMENTMETHOD_CHANGED:\n        // eslint-disable-line no-undef\n        // your code\n        break;\n      case GEMerchantUtils.ClientEvents.BUTTON_CLICKED:\n        // eslint-disable-line no-undef\n        // your code\n        break;\n      case GEMerchantUtils.ClientEvents.COMBO_CHANGED:\n        // eslint-disable-line no-undef\n        // your code\n        break;\n      case GEMerchantUtils.ClientEvents.ADD_NEW_SHIPPING_ADDRESS:\n        // eslint-disable-line no-undef\n        // your code\n        break;\n      case GEMerchantUtils.ClientEvents.ON_PAGE_LOAD:\n        // eslint-disable-line no-undef\n        // your code\n        break;\n      case GEMerchantUtils.ClientEvents.ON_CLIENT_ERROR:\n        // eslint-disable-line no-undef\n        // your code\n        break;\n      case GEMerchantUtils.ClientEvents.ON_SERVER_ERROR:\n        // eslint-disable-line no-undef\n        // your code\n        break;\n      case GEMerchantUtils.ClientEvents.CHECKBOX_CHANGE:\n        // eslint-disable-line no-undef\n        // your code\n        break;\n      case GEMerchantUtils.ClientEvents.WINDOW_SHOWN:\n        // eslint-disable-line no-undef\n        // your code\n        break;\n      default:\n        break;\n    }\n  } catch (e) {\n    console.error(e); // eslint-disable-line no-console\n  }\n};\n\n/**\n * Customer registration post message handler\n * @param {Object} event - Event object\n */\nGeScriptLoader.prototype.registrationPostMessageHandler = function (event) {\n  try {\n    // check request is from legitimate source and message is expected or not\n    if (!GlobalE || !GlobalE.CheckoutManager || !GlobalE.CheckoutManager.IsGlobaleMessage(event.origin)) {\n      return;\n    }\n    var eventMessage = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;\n    var geIframe = document.querySelector('#gle_iframe');\n    if ('Key' in eventMessage && eventMessage.Key === 'CustomerRegistration') {\n      Helpers.makeJsonAjaxCall(geIframe.dataset.registrationUrl, 'POST', JSON.stringify(eventMessage.Data)).then(function (response) {\n        if (response) {\n          response = JSON.parse(response);\n          GlobalE.CheckoutManager.UpdateGlobalE('CustomerRegistration', response);\n        }\n      }).catch(function (e) {\n        console.error(e); // eslint-disable-line no-console\n      });\n    }\n  } catch (e) {\n    console.error(e); // eslint-disable-line no-console\n  }\n};\n\n/**\n * Init events\n */\nGeScriptLoader.prototype.initEvents = function () {\n  // check script loader data\n  if (!window.geScriptLoaderData) {\n    return;\n  }\n\n  // ---------------------------GENERAL EVENTS--------------------------- //\n  // 'GlobalE.SetMerchantParameters' event\n  GlobalE.SetMerchantParameters(JSON.parse(window.geScriptLoaderData.clientSettings));\n\n  // 'GlobalE.ScriptsURL' event\n  GlobalE.ScriptsURL(window.geScriptLoaderData.clientJsDomain);\n\n  // 'GlobalE.SetCookieDomain' event\n  GlobalE.SetCookieDomain(window.geScriptLoaderData.cookieDomain);\n\n  // Remove Global-e redirect parameters\n  this.removeGeRedirectParams();\n\n  // 'GlobalE.LoadWelcome' event\n  if (window.geScriptLoaderData.globaleOperatedCountry) {\n    GlobalE.LoadWelcome(window.geScriptLoaderData.country, window.geScriptLoaderData.culture, window.geScriptLoaderData.currency);\n  }\n\n  // 'GlobalE.LoadShippingSwitcher' event\n  GlobalE.LoadShippingSwitcher(window.geScriptLoaderData.country, window.geScriptLoaderData.culture, window.geScriptLoaderData.currency, false, this.loadShippingSwitcherHandler);\n\n  // 'GlobalE.OnShippingSwitcherClosed' event\n  GlobalE.OnShippingSwitcherClosed(this.onShippingSwitcherClosedHandler);\n\n  // ---------------------------CHECKOUT EVENTS--------------------------- //\n  var geIframe = document.querySelector('#gle_iframe');\n  if (geIframe) {\n    // 'GlobalE.Checkout' event\n    GlobalE.Checkout(geIframe.dataset.cartToken, 'gle_iframe');\n\n    // 'KeepAlive' feature\n    this.initKeepAlive();\n\n    // 'GlobalE.OnCheckoutStepLoaded' event\n    GlobalE.OnCheckoutStepLoaded(this.onCheckoutStepLoadedHandler);\n\n    // 'GlobalE.OnClientEvent' event\n    GlobalE.OnClientEvent(this.onClientEvent);\n\n    // 'Customer registration' feature\n    window.addEventListener('message', this.registrationPostMessageHandler, false);\n  }\n};\nGeScriptLoader.prototype.init = function () {\n  this.initScriptLoaderData();\n  this.initContentPriceConversion();\n  this.initClientSDK().then(this.initEvents.bind(this)).catch(function (e) {\n    console.error(e); // eslint-disable-line no-console\n  });\n};\n\n//--------------------------------------------------\n// Initialisation\n//--------------------------------------------------\n\n/**\n * General init function\n */\nfunction init() {\n  var geScriptLoader = new GeScriptLoader();\n  geScriptLoader.init();\n}\n\n/**\n * Run initialisation once document is loaded\n */\nif (/complete|interactive|loaded/.test(document.readyState)) {\n  init();\n} else {\n  document.addEventListener('DOMContentLoaded', init);\n}\n\n//# sourceURL=webpack:///./cartridges/app_dune/cartridge/client/default/js/geScriptLoader.js?");

/***/ })

/******/ });